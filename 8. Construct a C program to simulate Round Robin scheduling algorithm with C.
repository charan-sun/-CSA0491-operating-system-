#include <stdio.h>

#define MAX_PROCESSES 10
#define TIME_QUANTUM 2

struct Process {
    int id;
    int burst_time;
    int remaining_time;
    int turnaround_time;
};

void roundRobinScheduling(struct Process processes[], int n) {
    int remaining_processes = n;
    int current_time = 0;
    int quantum = TIME_QUANTUM;

    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                if (processes[i].remaining_time <= quantum) {
                    current_time += processes[i].remaining_time;
                    processes[i].turnaround_time = current_time;
                    processes[i].remaining_time = 0;
                    remaining_processes--;
                } else {
                    current_time += quantum;
                    processes[i].remaining_time -= quantum;
                }
                printf("Process %d executed at time %d\n", processes[i].id, current_time);
            }
        }
    }
}

int main() {
    struct Process processes[MAX_PROCESSES];
    int n;

    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input details of each process
    printf("Enter burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Process %d: ", processes[i].id);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].turnaround_time = 0;
    }

    // Perform Round Robin scheduling
    roundRobinScheduling(processes, n);

    // Print turnaround time for each process
    printf("\nTurnaround times:\n");
    printf("Process ID\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\n", processes[i].id, processes[i].turnaround_time);
    }

    return 0;
}
