#include <stdio.h>

#define MAX_PROCESSES 10

struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int completion_time;
};

void calculateCompletionTimes(struct Process processes[], int n) {
    int current_time = 0;
    int min_burst_time, index;
    for (int i = 0; i < n; i++) {
        min_burst_time = __INT_MAX__;
        // Find the process with the shortest burst time among those that have arrived
        for (int j = 0; j < n; j++) {
            if (processes[j].arrival_time <= current_time && processes[j].completion_time == 0) {
                if (processes[j].burst_time < min_burst_time) {
                    min_burst_time = processes[j].burst_time;
                    index = j;
                }
            }
        }
        // Update current time and completion time
        current_time += processes[index].burst_time;
        processes[index].completion_time = current_time;
    }
}

void printCompletionTimes(struct Process processes[], int n) {
    printf("Process ID\tArrival Time\tBurst Time\tCompletion Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrival_time,
               processes[i].burst_time, processes[i].completion_time);
    }
}

int main() {
    struct Process processes[MAX_PROCESSES];
    int n;

    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input details of each process
    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Process %d: ", processes[i].id);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].completion_time = 0;
    }

    // Calculate completion times for each process
    calculateCompletionTimes(processes, n);

    // Print completion times
    printf("\nNon-preemptive SJF Scheduling:\n");
    printCompletionTimes(processes, n);

    return 0;
}
